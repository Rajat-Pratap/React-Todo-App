{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","preventDefault","newItem","this","console","log","Items","setState","updatedList","filter","Date","now","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAkCeA,MA7Bf,SAAmBC,GAEf,IACMC,EADMD,EAAME,MACIC,KAAI,SAAAC,GACtB,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAAKZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QACvG,8BACI,kBAAC,IAAD,CACAD,UAAU,UACVU,KAAK,QACLC,QAAS,kBAAIhB,EAAMiB,WAAWb,EAAKE,cAQvD,OACA,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BlB,K,eCtBbmB,IAAQC,IAAIC,K,IAgFGC,E,kDA7Eb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAM,CACTtB,MAAM,GACNuB,YAAY,CACVf,KAAK,GACLJ,IAAI,KAGR,EAAKoB,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKV,WAAW,EAAKA,WAAWU,KAAhB,gBAChB,EAAKd,UAAU,EAAKA,UAAUc,KAAf,gBAZC,E,oDAeVf,GACNA,EAAEiB,iBACF,IAAMC,EAASC,KAAKP,MAAMC,YAE1B,GADAO,QAAQC,IAAIH,GACM,KAAfA,EAAQpB,KAAU,CACnB,IAAMwB,EAAM,GAAD,mBAAKH,KAAKP,MAAMtB,OAAhB,CAAsB4B,IACjCC,KAAKI,SAAS,CACZjC,MAAMgC,EACNT,YAAY,CACVf,KAAK,GACLJ,IAAI,S,iCAMDA,GACT,IACM8B,EADM,YAAIL,KAAKP,MAAMtB,OACFmC,QAAO,SAAAjC,GAAI,OAAEA,EAAKE,MAAMA,KACjDyB,KAAKI,SAAS,CACZjC,MAAMkC,M,gCAIA1B,EAAKJ,GACb,IAAMJ,EAAM6B,KAAKP,MAAMtB,MACvBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGdqB,KAAKI,SAAS,CAACjC,Y,kCAGLU,GACVmB,KAAKI,SAAS,CACZV,YAAY,CACVf,KAAME,EAAEE,OAAOL,MACfH,IAAIgC,KAAKC,W,+BAMb,OACE,yBAAKlC,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAagC,SAAUT,KAAKH,SACnC,2BACArB,KAAK,OACLkC,YAAY,aACZhC,MAAOsB,KAAKP,MAAMC,YAAYf,KAC9BC,SAAUoB,KAAKL,cACf,4BAAQnB,KAAK,UAAb,WAGF,kBAAC,EAAD,CAAWL,MAAO6B,KAAKP,MAAMtB,MAAOe,WAAYc,KAAKd,WAAYJ,UAAWkB,KAAKlB,iB,GAxEzE6B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.d1bcc516.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css'\r\nimport {fontAwesomeIcon, FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nfunction ListItems(props){\r\n    \r\n    const items=props.items\r\n    const listItems=items.map(item=>{\r\n        return (\r\n            <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{props.setUpdate(e.target.value,item.key)}} />\r\n                    <span>\r\n                        <FontAwesomeIcon \r\n                        className='faicons' \r\n                        icon=\"trash\" \r\n                        onClick={()=>props.deleteItem(item.key)}\r\n                        />\r\n                    </span>\r\n                </p>\r\n                \r\n            </div>\r\n        )\r\n    })\r\n    return(\r\n    <div>\r\n        <FlipMove duration={250} easing='ease-in-out'>\r\n            {listItems}\r\n        </FlipMove>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ListItems","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput=this.handleInput.bind(this)\n    this.addItem=this.addItem.bind(this)\n    this.deleteItem=this.deleteItem.bind(this)\n    this.setUpdate=this.setUpdate.bind(this)\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem= this.state.currentItem\n    console.log(newItem)\n    if(newItem.text!==\"\"){\n      const Items=[...this.state.items,newItem]\n      this.setState({\n        items:Items,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n\n  deleteItem(key){\n    const items=[...this.state.items]\n    const updatedList= items.filter(item=>item.key!==key)\n    this.setState({\n      items:updatedList\n    })\n  }\n\n  setUpdate(text,key){\n    const items=this.state.items;\n    items.map(item=>{\n      if(item.key===key)\n        item.text=text;\n    })\n\n    this.setState({items})\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input \n            type=\"text\" \n            placeholder=\"Enter Text\" \n            value={this.state.currentItem.text} \n            onChange={this.handleInput} />\n            <button type=\"submit\"> Add </button>\n          </form>\n        </header>\n          <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}